#Todo
#Add to use forms
Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

#detect script path because $PSScriptRoot does not work in ps2exe
if ($MyInvocation.MyCommand.CommandType -eq "ExternalScript"){
    $ScriptPath = Split-Path -Parent -Path $MyInvocation.MyCommand.Definition
}
 else { $ScriptPath = Split-Path -Parent -Path ([Environment]::GetCommandLineArgs()[0]) 
     if (!$ScriptPath){ $ScriptPath = "." }
}

#region functions

#
function Write-FileUtf8{
    param(
        #[string]$InputVar will convert arrays to strings/newlines
        [string]$InputVar,[string]$Filepath,[bool]$Append
    )
    if($Append){
        $InputVar | Out-File -Append -Encoding utf8 -FilePath $Filepath
    }else{
        $InputVar | Out-File -Encoding utf8 -FilePath $Filepath
    }
}

#endregion functions

#region classes
class NorthstarServer {
    [int]$ProcessID = 0
    [int64]$VirtualMemory = 0
    [int64]$Memory = 0

    [string]$ns_server_name = "Northstar Server generated by PSNorthstarWatcher."
    [string]$ns_server_desc = "This is the default description generated by PSNorthstarWatcher."
    [int]$ns_player_auth_port = "8081" #default 8081
    [int]$UDPPort = "37015"
    [string]$Directory = "1"
    [string]$AbsolutePath = ""
    [string]$BinaryFileName = "NorthstarLauncher.exe"
    [string]$ns_masterserver_hostname = '"https://northstar.tf"' 
    [string]$StartingArgs = "+setplaylist private_match -dedicated -multiple -softwared3d11"
    [ValidateSet(0,1)][int]$ns_report_server_to_masterserver = 1 
    [ValidateSet(0,1)][int]$ns_auth_allow_insecure = 0 
    
    [string]$ns_server_password = '""' #cfg
    [bool]$PlaylistVarOverrides = $false
    [SetplaylistVarOverrides]$SetplaylistVarOverrides = [SetplaylistVarOverrides]::new() #
    [Tickrate]$TickRate = [Tickrate]::new()#cf

    [ValidateSet(
        "mp_angel_city","mp_black_water_canal","mp_grave","mp_colony02","mp_complex3","mp_crashsite3","mp_drydock","mp_eden","mp_thaw","mp_forwardbase_kodai","mp_glitch","mp_homestead","mp_relic02","mp_rise","mp_wargames","mp_lobby","mp_lf_deck","mp_lf_meadow","mp_lf_stacks","mp_lf_township","mp_lf_traffic","mp_lf_uma","mp_coliseum","mp_coliseum_column"
    )][string]$ns_private_match_last_map = "mp_glitch"

    [ValidateSet(
        "tdm", "cp","ctf","lts","ps","ffa","speedball","mfd","ttdm","fra","gg","inf","tt","kr","fastball","arena","ctf_comp","attdm"
    )][string]$ns_private_match_last_mode = "tdm"

    [ValidateSet(0,1)][int]$ns_should_return_to_lobby = 0 
    [ValidateSet(0,1,2)][int]$ns_private_match_only_host_can_change_settings = 2 

    [int]$net_chan_limit_mode = 2
    [int]$net_chan_limit_msec_per_sec = 100
    [int]$sv_querylimit_per_sec = 15
    [ValidateSet(0,1)][int]$net_data_block_enabled = 0
    [ValidateSet(0,1)][int]$host_skip_client_dll_crc = 1
    [ValidateSet(0,1)][int]$everything_unlocked = 1
    [ValidateSet(0,1)][int]$ns_erase_auth_info = 1
    [ValidateSet(0,1)][int]$ns_report_sp_server_to_masterserver = 0

    #each object in this array contains 1 line of the config file
    [System.Collections.ArrayList]$autoexec_ns_server = @()

    #will write configuration to config file autoexec_ns_server.cfg based on the class' property names (ns_*, sv_*, host_*, ...)
    [void]WriteConfiguration(){
        $CVarArray = (($this | Get-Member) | where-object -Property MemberType -eq Property) | foreach-object{$($_.Definition).split(" ")[1]}
        ForEach($Cvar in $CVarArray){
            if($Cvar -match 'ns_' -or $Cvar -match 'host_' -or $Cvar -match 'everything_' -or $Cvar -match 'sv_' -or $Cvar -match 'net_'){
                $this.autoexec_ns_server.Add($Cvar +" "+ $this."$Cvar")
            }
        }
        $CVarArrayTickrate = (($this.TickRate | Get-Member) | where-object -Property MemberType -eq Property) | foreach-object{$($_.Definition).split(" ")[1]}
        ForEach($CVar in $CVarArrayTickrate){
            $this.autoexec_ns_server.Add($Cvar +" "+ $this.Tickrate."$Cvar")
        }
        $this.autoexec_ns_server.RemoveAt(0)
        Write-FileUtf8 -FilePath "$($this.AbsolutePath)\R2Northstar\mods\Northstar.CustomServers\mod\cfg\autoexec_ns_server.cfg" -InputVar $this.autoexec_ns_server
    }

    [void]Start(){
        
    }
}

class Server{
    [string]$BasePath
    [System.Collections.ArrayList]$NorthstarServers = @()
}

class SetplaylistVarOverrides {
    [string]$maxplayersplaylist = "-maxplayersplaylist" # should always be "-maxplayersplaylist"
    [int]$max_players
    [int]$custom_air_accel_pilot
    [double]$pilot_health_multiplier
    [int]$run_epilogue
    [int]$respawn_delay

    [int]$boosts_enabled
    [int]$earn_meter_pilot_overdrive 
    [double]$earn_meter_pilot_multiplier

    [double]$earn_meter_titan_multiplier
    [int]$aegis_upgrades  
    [int]$infinite_doomed_state
    [int]$titan_shield_regen  

    [int]$scorelimit
    [int]$roundscorelimit
    [int]$timelimit
    [int]$oob_timer_enabled
    [int]$roundtimelimit

    [int]$classic_rodeo
    [int]$classic_mp
    [int]$fp_embark_enabled
    [int]$promode_enable

    [int]$riff_floorislava
    [int]$featured_mode_all_holopilot
    [int]$featured_mode_all_grapple
    [int]$featured_mode_all_phase
    [int]$featured_mode_all_ticks
    [int]$featured_mode_tactikill
    [int]$featured_mode_amped_tacticals
    [int]$featured_mode_rocket_arena
    [int]$featured_mode_shotguns_snipers
    [int]$iron_rules

    [int]$riff_player_bleedout
    [int]$player_bleedout_forceHolster
    [int]$player_bleedout_forceDeathOnTeamBleedout
    [int]$player_bleedout_bleedoutTime
    [int]$player_bleedout_firstAidTime
    [int]$player_bleedout_firstAidTimeSelf
    [int]$player_bleedout_firstAidHealPercent
    [int]$player_bleedout_aiBleedingPlayerMissChance
}

class TickRate {
    [double]$base_tickinterval_mp = 0.016666667 # default for 60  tick server / 20 tick client
    [int]$rate = 786432
    [int]$sv_updaterate_mp = 20 # default for 60  tick server / 20 tick client
    [int]$sv_minupdaterate = 20 # default for 60  tick server / 20 tick client
    [int]$sv_max_snapshots_multiplayer = 300 # updaterate * 15
}

#legacy installer just for reference
<#class Installer {
    [int]$ServerCount = 1
    [string]$InstallDir = "$env:localappdata\NorthstarServer"  #default $env:localappdata\Northstarserver
    [string]$TitanfallSourceDir = "${env:ProgramFiles(x86)}\Origin\Titanfall2" #default ${env:ProgramFiles(x86)}\Origin\Titanfall2
    [string]$NorthstarSourceDir = "Northstar" #default: same folder
    [string]$ServerNamePrefix = "Northstar Server generated by PowerShell"
    [string]$StartingArgsAll = "+setplaylist private_match -dedicated -multiple -softwared3d11"
    [System.Collections.ArrayList]$NorthstarServers = @() #System.Collections.ArrayList of [NorthstarServer] gets in here
    [int]$UDPStartPort = 37015
    [int]$UDPEndPort = 37019
    [int]$TCPStartPort = 8081
    [int]$TCPEndPort = 8089

    [bool]$EZMode = $True

    Installer($inputTitanfall2Path){
        if($inputTitanfall2Path){
            $this.TitanfallSourceDir = $inputTitanfall2Path
            Write-Host "Titanfall2 directory could be read from registry. You should be safe to use default value later."
        }
        else{
            Write-Host "Titanfall2 directory could NOT be read from registry.You have to set it manually later in the process."
        }
    }

    #[PSNSWatcherConfig]$PSNSWatcherConfig = [PSNSWatcherConfig]::new($this.InstallDir)
    

    [string]GetUserInput($installervar,$message,$inputtype){
        
        $defaultstring = "`nPress Enter for default`n`n"
        $spacer = "`n`n---------------------`n"
        $usingdefault = "Using default value."
        $config = ""

        Switch($inputtype){
            "YesNoNoInstallerVar"{
                $userinput = Read-Host "$($spacer)$message $defaultstring [Y]"
                if(HasNoUserInput $userinput){
                    Write-Host "$usingdefault : [Y]"
                    return "Y"
                }else{
                    return $userinput
                }
             }

             "String"{
                $userinput = Read-Host "$($spacer)$message $defaultstring [$installervar]"
                if(HasNoUserInput $userinput){
                    Write-Host "$usingdefault : $installervar"
                    return "$installervar"
                }else{
                    return $userinput
                }
             }
            default{
                throw "Wrong inputtype for GetUserInputConfig selected."
            }
        }
        return ""
    }
    [void]GetUserInputConfig(){
        $this.ServerCount = [int]($this.GetUserInput($this.ServerCount,"How many servers do you want to install?","String"))
        $this.TitanfallSourceDir = $this.GetUserInput($this.TitanfallSourceDir,"Where is your Titanfall2 game directory?","String")
        $this.InstallDir = $this.GetUserInput($this.InstallDir,"Where do you want to install NorthstarServers to?","String")
        #$this.PSNSWatcherConfig.originpath = "$($this.InstallDir)\"
        $this.StartingArgsAll = $this.GetUserInput($this.StartingArgsAll,"What starting arguments do you want to use? Default strongly recommended!","String")
        $this.UDPStartPort = [int]($this.GetUserInput($this.UDPStartPort,"Please type in the first UDP port you want to use.","String"))
        if($this.ServerCount -gt 1){
            $this.UDPEndPort = [int]($this.GetUserInput($this.UDPEndPort,"Please type in the last UDP port you want to use of your range.","String"))
        }
       
        $this.TCPStartPort = [int]($this.GetUserInput($this.TCPStartPort,"Please type in the first TCP port you want to use.","String"))
        if($this.ServerCount -gt 1){
            $this.TCPEndPort = [int]($this.GetUserInput($this.TCPEndPort,"Please type in the last TCP port you want to use of your range.","String"))
        }
        
        $this.ServerNamePrefix = $this.GetUserInput($this.ServerNamePrefix,"What server name prefix do you want to use for all your servers?","String")
        
        #$this.PSNSWatcherConfig.myserverfilternamearray = $this.PSNSWatcherConfig.myserverfilternamearray + @($this.ServerNamePrefix)
        
        $this.PSNSWatcherConfig.northstarlauncherargs = $this.PSNSWatcherConfig.northstarlauncherargs + @($this.StartingArgsAll)

        $tcpport = $this.TCPStartPort
        $udpport = $this.UDPStartPort
        For($servercounter = 0;$servercounter -lt $this.ServerCount;$servercounter++){
            $this.NorthstarServers.Add([NorthstarServer]::new())
            $this.NorthstarServers[$servercounter].ns_server_name = '"' +($this.ServerNamePrefix) + " #$($servercounter+1)" + '"'
            $this.NorthstarServers[$servercounter].Directory = [string]($servercounter+1)
            $this.PSNSWatcherConfig.gamedirs = $this.PSNSWatcherConfig.gamedirs + @($this.NorthstarServers[$servercounter].Directory)
            $this.NorthstarServers[$servercounter].AbsolutePath = ($this.InstallDir) + "\" +$this.NorthstarServers[$servercounter].Directory
            $this.NorthstarServers[$servercounter].ns_player_auth_port = $tcpport
            $this.PSNSWatcherConfig.tcpportarray = $this.PSNSWatcherConfig.tcpportarray + $this.NorthstarServers[$servercounter].ns_player_auth_port
            $this.NorthstarServers[$servercounter].UDPPort = $udpport
            $this.PSNSWatcherConfig.udpportarray = $this.PSNSWatcherConfig.udpportarray + @($this.NorthstarServers[$servercounter].UDPPort)
            $this.NorthstarServers[$servercounter].Tickrate = [TickRate]::new()
            $this.NorthstarServers[$servercounter].StartingArgs = ($this.StartingArgsAll) + " -port $($this.NorthstarServers[$servercounter].UDPPort)"
            
            if($udpport -gt $this.UDPEndPort){
                throw "Not enough UDP Ports available for the amount of servers. Servercount: " +$this.ServerCount + " UDP Start port: " +$this.UDPStartPort + " UDP end port: " +$this.UDPEndPort
            }
            
            if($tcpport -gt $this.TCPEndPort){
                throw "Not enough TCP Ports available for the amount of servers. Servercount: "+$this.ServerCount+" TCP Start port: "+$this.TCPStartPort+" TCP end port: "+$this.TCPEndPort
            }
            $this.NorthstarServers[$servercounter].ns_private_match_last_mode = '"' + ($this.GetUserInput($this.NorthstarServers[$servercounter].ns_private_match_last_mode,"What gamemode would you like to run on Server $($this.NorthstarServers[$servercounter].ns_server_name)","String")) + '"'
            Switch(($this.GetUserInput($this.NorthstarServers[$servercounter].ns_private_match_only_host_can_change_settings,"Do you want players to be able to change map and mode in lobby on Server $($this.NorthstarServers[$servercounter].ns_server_name)","YesNoNoInstallerVar"))){
                "Y"{$this.NorthstarServers[$servercounter].ns_private_match_only_host_can_change_settings = 0}
                "N"{$this.NorthstarServers[$servercounter].ns_private_match_only_host_can_change_settings = 2}
            }
            $udpport++
            $tcpport++
        }
    }

    [void]Install(){ #install all servers
        if(Test-Path ($this.NorthstarSourceDir)){
                Write-Host "Northstar source directory exists."
                if(Test-Path "$($this.NorthstarSourceDir)\R2Northstar"){
                    Write-Host "$($this.NorthstarSourceDir)\R2Northstar exists"
                    if("$($this.NorthstarSourceDir)\NorthstarLauncher.exe"){
                        Write-Host "Executable NorthstarLauncher.exe exists"
                    }
                    else{
                        throw "Executable $($this.NorthstarSourceDir)\NorthstarLauncher.exe not found."
                    }
                }else{
                    throw "$($this.NorthstarSourceDir)\R2Northstar does not exist."
                }
            }else{
                throw "Northstar source directory does not exist."
            }
        if(Test-Path $this.InstallDir){
            Write-Host "Destination Path InstallDir $($this.InstallDir) exists."
        }
        else{
            Write-Host "Destination Path InstallDir $($this.InstallDir) missing. Creating ..."
            New-Item -ItemType Directory -Path $($this.InstallDir)
        }
        if(Test-Path $this.TitanfallSourceDir){
            Write-Host "Titanfall Source folder exists."
        }else{
            throw "Titanfall source at $($this.TitanfallSourceDir) does not exist."
        }
        ForEach($server in $this.NorthstarServers){
            if(Test-Path "$($this.installdir)\$($server.Directory)"){
                Write-Host "Directory $($this.installdir)\$($server.Directory) for server $server.ns_server_name does exist."
            }else{
                Write-Host "Directory $($this.installdir)\$($server.Directory) for server $server.ns_server_name missing. Creating..."
                New-Item -ItemType Directory -Path "$($this.installdir)\$($server.Directory)"
            }
            
            Write-Host "Creating symbolic links for Titanfall2 files in $($this.installdir)\$($server.Directory)"
            $tffiles = Get-Childitem $this.TitanfallSourceDir
            ForEach($file in $tffiles){
                if(Test-Path "$($this.installdir)\$($server.Directory)\$($file.name)"){ #does the item exist at the target, where the symbolic link should be placed?
                    $target = get-item "$($this.installdir)\$($server.Directory)\$($file.name)" #put target in an item object
                    Write-Host "Cannot create symbolic link at $target because it already exists."
                    if($target.LinkType -eq "SymbolicLink"){
                        Write-Host "$target is a symbolic link."
                        if($target.Target -eq $file.fullname){ #is it pointing to the right target?
                            Write-Host "$target symbolic link does point to the right file/directory."
                        }
                        else{throw "$target link is not correct, please delete it and run setup again."}
                    }else{
                        Write-Host "Target is $target"
                        Write-Host '$target.LinkType -eq "SymbolicLink"'  + " is " + ($target.LinkType -eq "SymbolicLink")
                        throw "$target is not a link, please inspect that file and eventually remove it. Then run setup again."}
                }else{
                    New-Item -ItemType SymbolicLink -Path "$($this.installdir)\$($server.Directory)\$($file.name)" -Value $file.fullname
                }
            }

            Write-Host "Copying files from Northstar Source to Destination"
            Copy-Item -Recurse -Path "$($this.NorthstarSourceDir)\*" -Destination "$($this.installdir)\$($server.Directory)" -ErrorAction SilentlyContinue
        }
    }

    [void]WriteConfigurationAll(){
        ForEach($server in $this.NorthstarServers){
            $server.WriteConfiguration()
        }
    }

}#>
#endregion classes

#region XAML

[xml]$global:xmlWPF = Get-Content -Path "C:\Server\Origin Games\PSScripts\window.xaml"
#Add WPF and Windows Forms assemblies
try{
	Add-Type -AssemblyName PresentationCore,PresentationFramework,WindowsBase,system.windows.forms
}catch {
	Throw "Failed to load Windows Presentation Framework assemblies."
}

#Create the XAML reader using a new XML node reader
$global:reader = New-Object System.Xml.XmlNodeReader $xmlWPF 
$global:xamGUI = [Windows.Markup.XamlReader]::Load( $reader )
#$Global:xamGUI = [Windows.Markup.XamlReader]::Load((new-object System.Xml.XmlNodeReader $xmlWPF))

#Create hooks to each named object in the XAML

$xmlWPF.SelectNodes("//*[@Name]") | %{
	Set-Variable -Name ($_.Name) -Value $xamGUI.FindName($_.Name) -Scope Global
} 

[xml]$global:xmlWPF2 = Get-Content -Path "C:\Server\Origin Games\PSScripts\monitor.xaml"
$global:reader2 = New-Object System.Xml.XmlNodeReader $xmlWPF2 
$global:xamGUI2 = [Windows.Markup.XamlReader]::Load( $reader2 )
$xmlWPF2.SelectNodes("//*[@Name]") | %{
	Set-Variable -Name ($_.Name) -Value $xamGUI2.FindName($_.Name) -Scope Global
} 

#endregion XAML
Class UserInputConfig{
    [string]$servername = "new Server"
    [string]$gamemode = "tdm"
    [string]$udpport = "37015"
    [bool]$epilogue = $false
    [bool]$boosts = $false
    [bool]$overridemaxplayers = $false
    [bool]$floorislava = $false
    [string]$airacceleration
    [string]$roundscorelimit
    [string]$scorelimit
    [string]$timelimit
    [string]$maxplayers
    [string]$playerhealthmulti
    [bool]$aegisupgrade = $false
    [bool]$classicmp = $false
    [bool]$playerbleed = $false
    [string]$tcpport = "8081"
    [bool]$reporttomasterserver = $true
    [bool]$softwared3d11 = $true
    [bool]$allowinsecure = $false
    [bool]$returntolobby = $false
    [bool]$playercanchangemap = $false
    [bool]$playercanchangemode = $false
    [double]$tickrate = 60
}

class MonitorVars{
    [string]$MONramlimit = "8"
    [string]$MONvmemlimit = "25"
    [string]$MONrestarthours = "4"
    [double]$MONrefreshrate = "10"
    [string]$MONservernamelabel = "servernamelabel"
}

#region window logic
$titanfall2path.text = (Get-ItemProperty -Path "hklm:\SOFTWARE\Respawn\Titanfall2" -ErrorAction SilentlyContinue).'Install Dir'
$northstarpath.text = "Northstar\"
$serverdirectory.text = "$($env:LOCALAPPDATA)\NorthstarServer\"
[System.Collections.ArrayList]$userinputarray = @()
[System.Collections.ArrayList]$monitorvararray = @()
[System.Collections.ArrayList]$userinputconfignames = @("servername","gamemode","epilogue","boosts","overridemaxplayers","floorislava","airacceleration","roundscorelimit","scorelimit","timelimit","maxplayers","playerhealthmulti","aegisupgrade","classicmp","playerbleed","tcpport","udpport","reporttomasterserver","softwared3d11","allowinsecure","returntolobby","playercanchangemap","playercanchangemode","tickrate")

#add first server automatically
$userinputarray.add([UserInputConfig]::new())
$serverdropdown.Items.add([System.Windows.Controls.ListBoxItem]::new())
$serverdropdown.Items[$serverdropdown.Items.Count-1].Content = "new Server1"
$userinputarray[0].servername = "new Server1"
$serverdropdown.Text = "new Server"
#$serverdropdown.SelectedValue.Content = "new Server"
[string]$servercount.Content = [int]$servercount.content +1

#load all variables into forms in window
#this function puts cvars from an array of [UserInputConfig] to the form. [UserInputConfig] property names, form variables MUST have the same name.
function CvarsToForm{
    param(
        [System.Collections.ArrayList]$cvararray ,
        $dropdown
    )
    if($cvararray){
        $userinputcvars = (($cvararray | Get-Member) | where-object -Property MemberType -eq Property) | foreach-object{$($_.Definition).split(" ")[1]}
    }
    
    ForEach($cvar in $userinputcvars){
        if(((Get-Variable "$cvar").Value).gettype().Name -eq "Checkbox"){
            (Get-Variable "$cvar").Value.isChecked = $cvararray[$dropdown.SelectedIndex]."$cvar"
        }else{
            if(((Get-Variable "$cvar").Value).gettype().Name -eq "Slider"){
                ((Get-Variable "$cvar").value).value = [double]$cvararray[$dropdown.SelectedIndex]."$cvar"
            }else{
               if(((Get-Variable "$cvar").Value).gettype().Name -eq "Label"){
                    ((Get-Variable "$cvar").value).content = [string]$cvararray[$dropdown.SelectedIndex]."$cvar"
               }else{
                    (Get-Variable "$cvar").value.text = [string]$cvararray[$dropdown.SelectedIndex]."$cvar" 
               }
            }
        }
    }
}


#Click on Add Server
$addserver.add_Click({
    $userinputarray.add([UserInputConfig]::new())
    $serverdropdown.Items.add([System.Windows.Controls.ListBoxItem]::new())
    $serverdropdown.Items[$serverdropdown.Items.Count-1].Content = "new Server"
    [string]$servercount.Content = [int]$servercount.content +1
})

$removeserver.add_Click({
    if(($servercount.content -gt 0) -and $serverdropdown.SelectedItem){
        $userinputarray.RemoveAt(($serverdropdown.SelectedIndex))
        $serverdropdown.Items.RemoveAt(($serverdropdown.SelectedIndex))
        [string]$servercount.Content = [int]$servercount.content -1
    }
})


#update window after servername change
$servername.add_LostFocus({
    $serverdropdown.Items[$serverdropdown.SelectedIndex].Content = $servername.text
    #$serverdropdown.UpdateLayout()
})

#update config after servername change
$servername.add_LostFocus({
    $userinputarray[$serverdropdown.SelectedIndex].servername = $servername.Text
})

$udpport.add_LostFocus({
    $userinputarray[$serverdropdown.SelectedIndex].udpport = $udpport.Text
})

$Gamemode.add_DropDownClosed({
    $userinputarray[$serverdropdown.SelectedIndex].gamemode = $Gamemode.Text
})

#server selection was changed using combobox/dropdown. update all values
$serverdropdown.add_DropDownClosed({
    <#$userinputcvars = (($userinputarray[0] | Get-Member) | where-object -Property MemberType -eq Property) | foreach-object{$($_.Definition).split(" ")[1]}
    ForEach($cvar in $userinputcvars){
         (Get-Variable "$cvar").value.text = [string]$userinputarray[$serverdropdown.SelectedIndex]."$cvar"
    }#>
    CvarsToForm -cvararray $userinputarray -dropdown $serverdropdown
})

$epilogue.add_Click({
    $userinputarray[$serverdropdown.SelectedIndex].epilogue = $epilogue.IsChecked
})

$boosts.add_Click({
    $userinputarray[$serverdropdown.SelectedIndex].boosts = $boosts.IsChecked
})

$overridemaxplayers.add_Click({
    $userinputarray[$serverdropdown.SelectedIndex].overridemaxplayers = $overridemaxplayers.IsChecked
})

$floorislava.add_Click({
    $userinputarray[$serverdropdown.SelectedIndex].floorislava = $floorislava.IsChecked
})

$aegisupgrade.add_Click({
    $userinputarray[$serverdropdown.SelectedIndex].aegisupgrade = $aegisupgrade.IsChecked
})

$classicmp.add_Click({
    $userinputarray[$serverdropdown.SelectedIndex].classicmp = $classicmp.IsChecked
})

$playerbleed.add_Click({
    $userinputarray[$serverdropdown.SelectedIndex].playerbleed = $playerbleed.IsChecked
})

$reporttomasterserver.add_Click({
    $userinputarray[$serverdropdown.SelectedIndex].reporttomasterserver = $reporttomasterserver.IsChecked
})

$softwared3d11.add_Click({
    $userinputarray[$serverdropdown.SelectedIndex].softwared3d11 = $softwared3d11.IsChecked
})

$allowinsecure.add_Click({
    $userinputarray[$serverdropdown.SelectedIndex].allowinsecure = $allowinsecure.IsChecked
})

$returntolobby.add_Click({
    $userinputarray[$serverdropdown.SelectedIndex].returntolobby = $returntolobby.IsChecked
})

$playercanchangemap.add_Click({
    $userinputarray[$serverdropdown.SelectedIndex].playercanchangemap = $playercanchangemap.IsChecked
})

$playercanchangemap.add_Unchecked({
    if($playercanchangemode.IsChecked -eq $True){
        $playercanchangemode.IsChecked = $False
        $userinputarray[$serverdropdown.SelectedIndex].playercanchangemap = $false
        $userinputarray[$serverdropdown.SelectedIndex].playercanchangemode = $false
    }
})

$playercanchangemode.add_Checked({
    $playercanchangemap.IsChecked = $True
    $userinputarray[$serverdropdown.SelectedIndex].playercanchangemap = $True
})

$playercanchangemode.add_Click({
    $userinputarray[$serverdropdown.SelectedIndex].playercanchangemode = $playercanchangemode.IsChecked
})

$airacceleration.add_LostFocus({
    $userinputarray[$serverdropdown.SelectedIndex].airacceleration = $airacceleration.Text
})

$roundscorelimit.add_LostFocus({
    $userinputarray[$serverdropdown.SelectedIndex].roundscorelimit = $roundscorelimit.Text
})

$scorelimit.add_LostFocus({
    $userinputarray[$serverdropdown.SelectedIndex].scorelimit = $scorelimit.Text
})

$timelimit.add_LostFocus({
    $userinputarray[$serverdropdown.SelectedIndex].timelimit = $timelimit.Text
})

$maxplayers.add_LostFocus({
    $userinputarray[$serverdropdown.SelectedIndex].maxplayers = $maxplayers.Text
})

$playerhealthmulti.add_LostFocus({
    $userinputarray[$serverdropdown.SelectedIndex].playerhealthmulti = $playerhealthmulti.Text
})

$tcpport.add_LostFocus({
    $userinputarray[$serverdropdown.SelectedIndex].tcpport = $tcpport.Text
})

$tickrate.add_ValueChanged({
    $userinputarray[$serverdropdown.SelectedIndex].tickrate = $tickrate.value
    [string]$servertickratelabel.Content = "Server Tickrate "+[string]$($tickrate.value)
})

$start.add_Click({
    $xmlWPF2.SelectNodes("//*[@Name]") | %{
	   Remove-Variable -Name ($_.Name) -Scope Global
    }
    Remove-Variable "xmlWPF2" -Scope Global
    Remove-Variable "reader2" -Scope Global
    Remove-Variable "xamGUI2" -Scope Global
    
    [xml]$global:xmlWPF2 = Get-Content -Path "C:\Server\Origin Games\PSScripts\monitor.xaml"
    $global:reader2 = New-Object System.Xml.XmlNodeReader $xmlWPF2 
    $global:xamGUI2 = [Windows.Markup.XamlReader]::Load( $reader2 )
    $xmlWPF2.SelectNodes("//*[@Name]") | %{
	    Set-Variable -Name ($_.Name) -Value $xamGUI2.FindName($_.Name) -Scope Global
    }
    ForEach($item in $serverdropdown.Items){
        $monitorvararray.add([MonitorVars]::new())
        $MONserverdrop.Items.add([System.Windows.Controls.ListBoxItem]::new())
        $MONserverdrop.Items[$MONserverdrop.Items.Count-1].Content = $item.content
        [string]$MONservercount.Content = [int]$MONservercount.content +1
        $monitorvararray[$MONserverdrop.Items.Count-1].MONservernamelabel = $item.content
    }
    #$MONservernamelabel.Content = $serverdropdown.Items[0].Content
    CvarsToForm -cvararray $monitorvararray $MONserverdrop

    $refreshrate = New-Object System.Windows.Forms.Timer
    $refreshrate.Interval = 10000
    $refreshrate.start()

    $refreshrate.add_Tick({
        Write-Host "refreshrate Tick"
        
        #check PID

        #check TCP

        #check UDP

        #check for window with engineerorclose

        #check RAM + total RAM

        #check VRAM + total VRAM

        #check map

        #check players

        #check uptime

        #
    })

    $MONserverdrop.add_DropDownClosed({
        CvarsToForm -cvararray $monitorvararray $MONserverdrop
    })

    $MONrefreshrate.add_ValueChanged({
        [int]$refreshrate.Interval = ($MONrefreshrate.Value)*1000
        Write-Host "refreshrate is now "$refreshrate.interval
        $refreshrate.Stop()
        $refreshrate.start()
    })

    $global:server = [Server]::new()
    $server.BasePath = $serverdirectory.text

    #create server object
    ForEach($item in $MONserverdrop.Items){
        $server.NorthstarServers.Add([NorthstarServer]::new())
    }

    #transfer vars from UI class to NorthstarServer class
    $uitransfercounter = 0
    ForEach($NorthstarServer in $server.NorthstarServers){
        $NorthstarServer.AbsolutePath = $serverdirectory.Text + $NorthstarServer.Directory

        $NorthstarServer.ns_server_name = $userinputarray[$uitransfercounter].servername
        $NorthstarServer.UDPPort = $userinputarray[$uitransfercounter].udpport
        $NorthstarServer.ns_player_auth_port = $userinputarray[$uitransfercounter].tcppoprt
        $NorthstarServer.ns_auth_allow_insecure = $userinputarray[$uitransfercounter].allowinsecure
        $NorthstarServer.ns_report_server_to_masterserver = $userinputarray[$uitransfercounter].reporttomasterserver
        #Password missing
        #lastmap missing
        $NorthstarServer.ns_private_match_last_mode = $userinputarray[$uitransfercounter].gamemode
        $NorthstarServer.ns_should_return_to_lobby = $userinputarray[$uitransfercounter].returntolobby
        if($userinputarray[$uitransfercounter].playercanchangemap -eq 1){
            $NorthstarServer.ns_private_match_only_host_can_change_settings = 1
        }else{
            $NorthstarServer.ns_private_match_only_host_can_change_settings = 2
        }
        if($userinputarray[$uitransfercounter].playercanchangemode -eq 1){
            $NorthstarServer.ns_private_match_only_host_can_change_settings = 0
        }
        #everything unlocked missing
        $NorthstarServer.SetplaylistVarOverrides.custom_air_accel_pilot = $userinputarray[$uitransfercounter].airacceleration
        $NorthstarServer.SetplaylistVarOverrides.roundscorelimit = $userinputarray[$uitransfercounter].roundscorelimit
        $NorthstarServer.SetplaylistVarOverrides.scorelimit = $userinputarray[$uitransfercounter].scorelimit
        $NorthstarServer.SetplaylistVarOverrides.timelimit = $userinputarray[$uitransfercounter].timelimit
        $NorthstarServer.SetplaylistVarOverrides.max_players = $userinputarray[$uitransfercounter].maxplayers
        $NorthstarServer.SetplaylistVarOverrides.pilot_health_multiplier = $userinputarray[$uitransfercounter].playerhealthmulti
        $NorthstarServer.SetplaylistVarOverrides.riff_player_bleedout = $userinputarray[$uitransfercounter].playerbleed
        $NorthstarServer.SetplaylistVarOverrides.classic_mp = $userinputarray[$uitransfercounter].classicmp
        $NorthstarServer.SetplaylistVarOverrides.aegis_upgrades = $userinputarray[$uitransfercounter].aegisupgrade
        $NorthstarServer.SetplaylistVarOverrides.boosts_enabled = $userinputarray[$uitransfercounter].boosts
        $NorthstarServer.SetplaylistVarOverrides.run_epilogue = $userinputarray[$uitransfercounter].epilogue
        $NorthstarServer.SetplaylistVarOverrides.riff_floorislava = $userinputarray[$uitransfercounter].floorislava
        #missing some more overridevars

        #Starting Arguments to string 
        $NorthstarServer.StartingArgs = "+setplaylist private_match -dedicated -multiple"
        if($userinputarray[$uitransfercounter].softwared3d11){
            $NorthstarServer.StartingArgs = $NorthstarServer.StartingArgs + " -softwared3d11"
        }

        $overridevars = ""
        ForEach ($varname in ($NorthstarServer.SetplaylistVarOverrides|gm -MemberType Property).Name){
            if($NorthstarServer.SetplaylistVarOverrides."$varname" -ne 0){
                $NorthstarServer.PlaylistVarOverrides = $True
                $overridevars = $overridevars + "$varname " + $Northstarserver.SetplaylistVarOverrides."$varname" + " "
            }
        }
        $overridevars = $overridevars -replace ".$"
        if($NorthstarServer.PlaylistVarOverrides = $True){
            $playlistvaroverridestring = " +setplaylistvaroverrides "
            $playlistvaroverridestring = $playlistvaroverridestring + $overridevars
            if($NorthstarServer.SetplaylistVarOverrides.max_players -gt 0){
                $playlistvaroverridestring = $playlistvaroverridestring + " -maxplayersplaylist"
            }
            $NorthstarServer.StartingArgs = $NorthstarServer.StartingArgs + " " + $playlistvaroverridestring
        }
        $uitransfercounter++
    }
    $xamGUI2.ShowDialog()
    $refreshrate.stop()
})

#endregion window logic


$xamGUI.ShowDialog()